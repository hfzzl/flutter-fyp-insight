import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import '../../profile/community_member_profile_repository.dart';
import 'journey_model.dart';

class JourneyRepository {
  final CommunityMemberProfileRepository profileRepository =
      CommunityMemberProfileRepository();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<void> addJourney(content) async {
    try {
      User? user = _auth.currentUser;
      if (user == null) {
        throw Exception("User is not logged in");
      }
      DocumentReference docRef = await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('my_journey')
          .add({
        'userId': user.uid,
        'content': content,
        'timestamp': DateTime.now(),
      });

      String autoGeneratedId = docRef.id;

      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('my_journey')
          .doc(autoGeneratedId)
          .update({
        'journeyPostId': autoGeneratedId,
      });

      await _firestore.collection('journey_post').doc(autoGeneratedId).set({
        'journeyPostId': autoGeneratedId,
        'userId': user.uid,
        'content': content,
        'timestamp': DateTime.now(),
      });
    } catch (e) {
      print(e);
    }
  }

  Stream<List<JourneyModel>> getJourneys() {
    User? user = _auth.currentUser;
    if (user == null) {
      throw Exception("User is not logged in");
    }
    return _firestore.collection('journey_post').snapshots().map((snapshot) {
      return snapshot.docs
          .map((doc) => JourneyModel.fromDocument(doc))
          .toList();
    });
  }

  Stream<List<JourneyModel>> getMyJourneys() {
    User? user = _auth.currentUser;
    if (user == null) {
      throw Exception("User is not logged in");
    }
    return _firestore
        .collection('users')
        .doc(user.uid)
        .collection('my_journey')
        .snapshots()
        .map((snapshot) {
      return snapshot.docs
          .map((doc) => JourneyModel.fromDocument(doc))
          .toList();
    });
  }

  Future<void> deleteJourney(journeyId) async {
    User? user = _auth.currentUser;
    if (user == null) {
      throw Exception("User is not logged in");
    }
    await _firestore
        .collection('users')
        .doc(user.uid)
        .collection('my_journey')
        .doc(journeyId)
        .delete();
    await _firestore.collection('journey_post').doc(journeyId).delete();
  }
}
